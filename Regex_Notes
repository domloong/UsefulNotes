Doc: https://docs.python.org/3/howto/regex.html

metacharacters ->  . ^ $ * + ? { } [ ] \ | ( )

Specifying character class []

   [abc] will match any of the characters a, b, or c; this is the same as [a-c]

   Metacharacters are not active inside classes. For example, [akm$] will match any of the characters 'a', 'k', 'm', or '$'.

   [^5] will match any character except '5'

\d
Matches any decimal digit; this is equivalent to the class [0-9].

\D
Matches any non-digit character; this is equivalent to the class [^0-9].

\s
Matches any whitespace character; this is equivalent to the class [ \t\n\r\f\v].

\S
Matches any non-whitespace character; this is equivalent to the class [^ \t\n\r\f\v].

\w
Matches any alphanumeric character; this is equivalent to the class [a-zA-Z0-9_].

\W
Matches any non-alphanumeric character; this is equivalent to the class [^a-zA-Z0-9_].

.. It matches anything except a newline character

Repeating Things

   * specifies that the previous character can be matched zero or more times, instead of exactly once

      ca*t will match 'ct' (0 'a' characters), 'cat' (1 'a'), 'caaat' (3 'a' characters), and so forth.

   + matches one or more times

      ca+t will match 'cat' (1 'a'), 'caaat' (3 'a's), but won’t match 'ct'

   ? matches either once or zero times

      home-?brew matches either 'homebrew' or 'home-brew'

   {m,n} means there must be at least m repetitions, and at most n

      For example, a/{1,3}b will match 'a/b', 'a//b', and 'a///b'. It won’t match 'ab', which has no slashes, or 'a////b', which has four.

      You can omit either m or n; in that case, a reasonable value is assumed for the missing value. 
      Omitting m is interpreted as a lower limit of 0, while omitting n results in an upper bound of infinity.

Use raw string notation to deal with blackslash plague

match(): Determine if the RE matches at the beginning of the string.

   group()  Return the string matched by the RE

Module-Level Functions

   re.match(r'From\s+', 'From amk Thu May 14 19:12:10 1998') 

Compilation Flags

   verbose example:

      charref = re.compile(r"""
         &[#]                # Start of a numeric entity reference
         (
            0[0-7]+         # Octal form
            | [0-9]+          # Decimal form
            | x[0-9a-fA-F]+   # Hexadecimal form
         )
         ;                   # Trailing semicolon
         """, re.VERBOSE)

Alternation |

   If A and B are regular expressions, A|B will match any string that matches either A or B

^

   Matches at the beginning of lines

$

   Matches at the end of a line

\b Word boundary

   p = re.compile(r'\bclass\b')
   p.search('no class at all')

\B is the opposite of \B

Groups ( )

   p = re.compile('(ab)*')
   p.match('ababababab').span()

   Subgroups are numbered from left to right, from 1 upward. 
   Groups can be nested; to determine the number, just count the opening parenthesis characters, going from left to right.

      >>> p = re.compile('(a(b)c)d')
      >>> m = p.match('abcd')
      >>> m.group(0)
      'abcd'
      >>> m.group(1)
      'abc'
      >>> m.group(2)
      'b'








   



